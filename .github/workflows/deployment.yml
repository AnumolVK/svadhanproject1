# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# In first deployment please comment 2 commands
# aws lambda delete-function --function-name ${funName[$index]} --output json(line no:81)
# aws apigateway delete-stage --rest-api-id $GATEWAY_ID --stage-name 'dev'(line no 145)


name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_S3_BUCKET: ${{ vars.S3_BUCKET }}
        GATEWAY_ID: ${{ secrets.API_GATEWAY_ID }}
        Method: |
         (
         "GET"
         "POST"
         "GET"
         "GET"
         "GET"
         "GET"
         "POST"
         "POST"
         "GET"
         )
        PathVar : |
         (
          "customerId"
          ""
          "agentId"
          "customerId"
          ""
          "loanId"
          ""
          ""
          "customerId"            
         )
        FunName: |
          (
            "activeLoans"
            "collectionConfirmation"
            "completedCollections"
            "customerProfile"
            "lenderAPI7Scheduler"
            "loanPaymentHistory"
            "loanTrend"
            "pendingCollections"
            "trustCircleDetails"
          )
        Handler: |
         (
           "com.svadhan.collection.route.ActiveLoansHandler::handleRequest"
           "com.svadhan.collection.route.CollectionConfirmationHandler::handleRequest"
           "com.svadhan.collection.route.CompletedCollectionsHandler::handleRequest"
           "com.svadhan.collection.route.CustomerProfileHandler::handleRequest"
           "com.svadhan.collection.route.LenderAPI7SchedulerHandler::handleRequest"
           "com.svadhan.collection.route.LoanPaymentHistoryHandler::handleRequest"
           "com.svadhan.collection.route.LoanTrendHandler::handleRequest"
           "com.svadhan.collection.route.PendingCollectionsHandler::handleRequest"
           "com.svadhan.collection.route.TrustCircleDetailsHandler::handleRequest"
         )


    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Copy zip file  
      run: mkdir staging && cp target/*.zip staging
  
    - name: Push Zip to S3
      uses: jakejarvis/s3-sync-action@v0.3.1
      env:
        SOURCE_DIR: './staging'
    - name: AWS Lambda Creation
      continue-on-error: true
             
      run: |
            handler=${{env.Handler}}
            funName=${{env.FunName}}
            # for item in ${array[*]}
            for index in ${!handler[@]}
            do
              echo 'INDEC$index'
               aws lambda delete-function --function-name ${funName[$index]} --output json
               aws lambda create-function \
                  --function-name ${funName[$index]} \
                  --memory-size '512'\
                  --role ${{secrets.LAMBDA_ARN }} \
                  --timeout 60 \
                  --runtime 'java17' \
                  --handler ${handler[$index]} \
                  --environment "Variables={SPRING_ACTIVE_PROFILES=${{vars.Deployment_Stage}}}" \
                  --code "S3Bucket=${{ vars.S3_BUCKET }},\
                         S3Key='${{ vars.APP_NAME}}-1.0.0-SNAPSHOT-lambda-package.zip',\
                         ImageUri='https://${{ vars.S3_BUCKET }}.s3.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.APP_NAME}}-1.0.0-SNAPSHOT-lambda-package.zip'"
             
            done
         
       


    # - name: AWS Gateway Creation
    #   continue-on-error: true
     
    #   run: |
      
    #       GATEWAY_ID=$(aws apigateway get-resources --rest-api-id $GATEWAY_ID --output json | jq --arg v "/" -r '.items[] |select(.path==$v) |.id')
    #          echo "GATEWAY_ID=$GATEWAY_ID" >> $GITHUB_ENV
    - name:  GET AWS Gateway Root Resource 
      continue-on-error: true
     
      run: |
      
          GW_RESOURCE_ID=$(aws apigateway get-resources --rest-api-id $GATEWAY_ID --output json | jq --arg v "/" -r '.items[] |select(.path==$v) |.id')
             echo "GW_RESOURCE_ID=$GW_RESOURCE_ID" >> $GITHUB_ENV
             echo "Resource $GW_RESOURCE_ID"
   
    - name: AWS Gateway Creation & Deployment
      continue-on-error: true
     
      run: |

       funName=${{env.FunName}}
       method=${{env.Method}}
       pathVar=${{env.PathVar}}
       for index in ${!funName[@]}
       # for item in ${funName[*]}
        do
          LAMBDA_ARN=$(aws lambda get-function --function-name ${funName[$index]} --query "Configuration.FunctionArn" --output text)
          echo "LAMBDA_ARN=$LAMBDA_ARN" >> $GITHUB_ENV
          RESOURCE_NAME=${funName[$index]}
          echo "RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_ENV
          aws apigateway get-resources --rest-api-id $GATEWAY_ID --output json
          RESOURCE_EXIST=$(aws apigateway get-resources --rest-api-id $GATEWAY_ID --output json | jq --arg v "/$RESOURCE_NAME" -r '.items[] |select(.path==$v) |.id')
          echo "RESOURCE_EXIST$RESOURCE_EXIST"
          echo "RESOURCE_EXIST$RESOURCE_EXIST" >> $GITHUB_ENV
          if [[ $RESOURCE_EXIST != "" ]]; then
            echo "RESOURCE_EXIST$RESOURCE_EXIST"
            aws apigateway delete-resource --rest-api-id $GATEWAY_ID --resource-id $RESOURCE_EXIST
          fi
          echo "RESOURCE not EXISTgggg$RESOURCE_EXIST"
          RESOURE_ID=$(aws apigateway  create-resource --rest-api-id $GATEWAY_ID --parent-id $GW_RESOURCE_ID  --path-part ${funName[$index]} --query id --output text)
          echo "RESOURE_ID=$RESOURE_ID" >> $GITHUB_ENV
          if 
          aws apigateway put-method --rest-api-id $GATEWAY_ID --resource-id $RESOURE_ID --http-method ${method[$index]} --authorization-type None
          aws apigateway put-method-response --rest-api-id $GATEWAY_ID --resource-id $RESOURE_ID --http-method ${method[$index]} --status-code 200 --response-models 'application/json'='Empty' 
          # aws lambda remove-permission --function-name ${funName[$index]} --statement-id ${funName[$index]}
          aws lambda add-permission --function-name ${funName[$index]} --source-arn "arn:aws:execute-api:${{ vars.AWS_REGION }}:263711368213:$GATEWAY_ID/*/${method[$index]}/${funName[$index]}" --principal apigateway.amazonaws.com --statement-id ${funName[$index]} --action lambda:InvokeFunction
          aws apigateway put-integration --rest-api-id $GATEWAY_ID --resource-id $RESOURE_ID --http-method ${method[$index]} --type AWS --integration-http-method ${method[$index]} --uri arn:aws:apigateway:$AWS_REGION:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations
          aws apigateway put-integration-response --rest-api-id $GATEWAY_ID --resource-id $RESOURE_ID --http-method ${method[$index]} --status-code 200 --selection-pattern "" 
          aws apigateway put-integration-response --rest-api-id $GATEWAY_ID --resource-id $RESOURE_ID --http-method ${method[$index]} --status-code 200 --selection-pattern "" 
         
        done

    - name: AWS ApiGateway Deployment
             
      run: |
         aws apigateway delete-stage --rest-api-id $GATEWAY_ID --stage-name ${{vars.Deployment_Stage}}
          aws apigateway create-deployment --rest-api-id $GATEWAY_ID --stage-name ${{vars.Deployment_Stage}}
    - name: Install Node
      uses: actions/setup-node@v1
      with:
        node-version: "12.x"


      # Install the newman command line utility and also install the html extra reporter
    - name: Install newman
      run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra


      # Make directory to upload the test results
    - name: Make Directory for results
      run: mkdir -p testResults


      # Run the POSTMAN collection
    - name: Run POSTMAN collection
      run: |
          newman run Notifications.postman_collection.json -e notifications.postman_environment.json --env-var "notificationURL=https://$GATEWAY_ID.execute-api.${{vars.AWS_REGION }}.amazonaws.com/dev"
      # Upload the contents of Test Results directory to workspace
    - name: Output the run Details
      uses: actions/upload-artifact@v2
      with:
          name: RunReports
          path: testResults
